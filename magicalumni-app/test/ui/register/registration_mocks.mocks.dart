// Mocks generated by Mockito 5.4.5 from annotations
// in magic_alumni/test/ui/register/registration_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:flutter/material.dart' as _i2;
import 'package:magic_alumni/model/colleges_model.dart' as _i7;
import 'package:magic_alumni/service/api_service.dart' as _i4;
import 'package:magic_alumni/service/authenticate_service.dart' as _i3;
import 'package:magic_alumni/ui/views/signup/signup_viewmodel.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextEditingController_0 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticateService_1 extends _i1.SmartFake
    implements _i3.AuthenticateService {
  _FakeAuthenticateService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiService_2 extends _i1.SmartFake implements _i4.ApiService {
  _FakeApiService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_3<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SignupViewmodel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignupViewmodel extends _i1.Mock implements _i6.SignupViewmodel {
  @override
  _i2.TextEditingController get userNameController => (super.noSuchMethod(
        Invocation.getter(#userNameController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#userNameController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#userNameController),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get collegeNameController => (super.noSuchMethod(
        Invocation.getter(#collegeNameController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#collegeNameController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#collegeNameController),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get depNameController => (super.noSuchMethod(
        Invocation.getter(#depNameController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#depNameController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#depNameController),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get currentOrCcyController => (super.noSuchMethod(
        Invocation.getter(#currentOrCcyController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#currentOrCcyController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#currentOrCcyController),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get linkedUrlController => (super.noSuchMethod(
        Invocation.getter(#linkedUrlController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#linkedUrlController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#linkedUrlController),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get mobileController => (super.noSuchMethod(
        Invocation.getter(#mobileController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#mobileController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#mobileController),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get emailController => (super.noSuchMethod(
        Invocation.getter(#emailController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#emailController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#emailController),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get designationController => (super.noSuchMethod(
        Invocation.getter(#designationController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#designationController),
        ),
        returnValueForMissingStub: _FakeTextEditingController_0(
          this,
          Invocation.getter(#designationController),
        ),
      ) as _i2.TextEditingController);

  @override
  List<_i7.CollegesModel> get collegesList => (super.noSuchMethod(
        Invocation.getter(#collegesList),
        returnValue: <_i7.CollegesModel>[],
        returnValueForMissingStub: <_i7.CollegesModel>[],
      ) as List<_i7.CollegesModel>);

  @override
  set collegesList(List<_i7.CollegesModel>? _collegesList) =>
      super.noSuchMethod(
        Invocation.setter(
          #collegesList,
          _collegesList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.AuthenticateService get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeAuthenticateService_1(
          this,
          Invocation.getter(#auth),
        ),
        returnValueForMissingStub: _FakeAuthenticateService_1(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i3.AuthenticateService);

  @override
  _i4.ApiService get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeApiService_2(
          this,
          Invocation.getter(#api),
        ),
        returnValueForMissingStub: _FakeApiService_2(
          this,
          Invocation.getter(#api),
        ),
      ) as _i4.ApiService);

  @override
  bool get isUserNameValid => (super.noSuchMethod(
        Invocation.getter(#isUserNameValid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isUserNameValid(bool? _isUserNameValid) => super.noSuchMethod(
        Invocation.setter(
          #isUserNameValid,
          _isUserNameValid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isCollegNameValid => (super.noSuchMethod(
        Invocation.getter(#isCollegNameValid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isCollegNameValid(bool? _isCollegNameValid) => super.noSuchMethod(
        Invocation.setter(
          #isCollegNameValid,
          _isCollegNameValid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isdepNameValid => (super.noSuchMethod(
        Invocation.getter(#isdepNameValid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isdepNameValid(bool? _isdepNameValid) => super.noSuchMethod(
        Invocation.setter(
          #isdepNameValid,
          _isdepNameValid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isYearValid => (super.noSuchMethod(
        Invocation.getter(#isYearValid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isYearValid(bool? _isYearValid) => super.noSuchMethod(
        Invocation.setter(
          #isYearValid,
          _isYearValid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLinkedInUrlValid => (super.noSuchMethod(
        Invocation.getter(#isLinkedInUrlValid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isLinkedInUrlValid(bool? _isLinkedInUrlValid) => super.noSuchMethod(
        Invocation.setter(
          #isLinkedInUrlValid,
          _isLinkedInUrlValid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isCurrentYearStudent => (super.noSuchMethod(
        Invocation.getter(#isCurrentYearStudent),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isCurrentYearStudent(bool? _isCurrentYearStudent) => super.noSuchMethod(
        Invocation.setter(
          #isCurrentYearStudent,
          _isCurrentYearStudent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set selectedCollege(_i7.CollegesModel? _selectedCollege) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedCollege,
          _selectedCollege,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set selectedDepartment(String? _selectedDepartment) => super.noSuchMethod(
        Invocation.setter(
          #selectedDepartment,
          _selectedDepartment,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isLoad(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoad,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isFormValid => (super.noSuchMethod(
        Invocation.getter(#isFormValid),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get disposed => (super.noSuchMethod(
        Invocation.getter(#disposed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set disposed(bool? _disposed) => super.noSuchMethod(
        Invocation.setter(
          #disposed,
          _disposed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initialised => (super.noSuchMethod(
        Invocation.getter(#initialised),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get onModelReadyCalled => (super.noSuchMethod(
        Invocation.getter(#onModelReadyCalled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isBusy => (super.noSuchMethod(
        Invocation.getter(#isBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get anyObjectsBusy => (super.noSuchMethod(
        Invocation.getter(#anyObjectsBusy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setCollege(_i7.CollegesModel? collegeName) => super.noSuchMethod(
        Invocation.method(
          #setCollege,
          [collegeName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setDepartment(_i7.DepartmentModel? departmentName) => super.noSuchMethod(
        Invocation.method(
          #setDepartment,
          [departmentName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> getColleges() => (super.noSuchMethod(
        Invocation.method(
          #getColleges,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> register() => (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateHome() => super.noSuchMethod(
        Invocation.method(
          #navigateHome,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateSignin() => super.noSuchMethod(
        Invocation.method(
          #navigateSignin,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigatePayment() => super.noSuchMethod(
        Invocation.method(
          #navigatePayment,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void currentYear(bool? isCurrentYearStudent) => super.noSuchMethod(
        Invocation.method(
          #currentYear,
          [isCurrentYearStudent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void snackBarMessage() => super.noSuchMethod(
        Invocation.method(
          #snackBarMessage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> userData() => (super.noSuchMethod(
        Invocation.method(
          #userData,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rebuildUi() => super.noSuchMethod(
        Invocation.method(
          #rebuildUi,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setInitialised(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setInitialised,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnModelReadyCalled(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setOnModelReadyCalled,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool busy(Object? object) => (super.noSuchMethod(
        Invocation.method(
          #busy,
          [object],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setBusyForObject(
    Object? object,
    bool? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setBusyForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setBusy(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusy,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T skeletonData<T>({
    required T? realData,
    required T? busyData,
    Object? busyKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #skeletonData,
          [],
          {
            #realData: realData,
            #busyData: busyData,
            #busyKey: busyKey,
          },
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
        returnValueForMissingStub: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
      ) as T);

  @override
  _i5.Future<T> runBusyFuture<T>(
    _i5.Future<T>? busyFuture, {
    Object? busyObject,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runBusyFuture,
          [busyFuture],
          {
            #busyObject: busyObject,
            #throwException: throwException,
          },
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_3<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_3<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i5.Future<T>);

  @override
  dynamic error(Object? object) => super.noSuchMethod(
        Invocation.method(
          #error,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearErrors() => super.noSuchMethod(
        Invocation.method(
          #clearErrors,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasErrorForKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #hasErrorForKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void setError(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForModelOrObject(
    dynamic value, {
    Object? key,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForModelOrObject,
          [value],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForObject(
    Object? object,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<T> runErrorFuture<T>(
    _i5.Future<T>? future, {
    Object? key,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runErrorFuture,
          [future],
          {
            #key: key,
            #throwException: throwException,
          },
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_3<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
        returnValueForMissingStub: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_3<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i5.Future<T>);

  @override
  void onFutureError(
    dynamic error,
    Object? key,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onFutureError,
          [
            error,
            key,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
